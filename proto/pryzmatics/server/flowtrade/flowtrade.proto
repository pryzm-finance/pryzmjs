syntax = "proto3";
package pryzmatics.server.flowtrade;

import "cosmos/base/query/v1beta1/pagination.proto";
import "gogoproto/gogo.proto";
import "refractedlabs/flowtrade/flow.proto";
import "cosmos_proto/cosmos.proto";

option go_package = "github.com/pryzm-finance/pryzmatics/server/flowtrade";

enum FlowStatus {
  option (gogoproto.goproto_enum_prefix) = false;
  FLOW_STATUS_ANY = 0 [(gogoproto.enumvalue_customname) = "FLOW_STATUS_ANY"];
  FLOW_STATUS_ACTIVE = 1 [(gogoproto.enumvalue_customname) = "FLOW_STATUS_ACTIVE"];
  FLOW_STATUS_ENDED = 2 [(gogoproto.enumvalue_customname) = "FLOW_STATUS_ENDED"];
}

enum TokenClaimability {
  TOKEN_CLAIMABILITY_ANY = 0 [(gogoproto.enumvalue_customname) = "TOKEN_CLAIMABILITY_ANY"];
  TOKEN_CLAIMABILITY_CLAIMABLE = 1 [(gogoproto.enumvalue_customname) = "TOKEN_CLAIMABILITY_CLAIMABLE"];
  TOKEN_CLAIMABILITY_NOT_CLAIMABLE = 2 [(gogoproto.enumvalue_customname) = "TOKEN_CLAIMABILITY_NOT_CLAIMABLE"];
}

message QueryFlowRequest {
  uint64 id = 1;
}

message QueryFlowResponse {
  refractedlabs.flowtrade.Flow flow = 1 [(gogoproto.nullable) = false];
}

message QueryAllFlowRequest {
  FlowStatus status = 1;
  string creator = 2;
  TokenClaimability token_in_claimability = 3;
  string participant = 4;
  TokenClaimability token_out_claimability = 5;
  cosmos.base.query.v1beta1.PageRequest pagination = 6 [(gogoproto.nullable) = true];
}

message QueryAllFlowResponse {
  repeated refractedlabs.flowtrade.Flow flows = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2 [(gogoproto.nullable) = true];
}