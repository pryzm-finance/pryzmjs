syntax = "proto3";
package prismfinance.prismcore.assets;

import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";

option go_package = "github.com/prism-finance/prism-core/x/assets/types";

// The properties of a supported asset
message RefractableAsset {
  // A unique user-provided identifier. Is used in the p/y token denom
  string id = 1;

  // The denomination of the token on Prism. This may be an icstaking cToken or an IBC transferred token denom for external assets.
  string token_denom = 2;

  // The id for the host chain on which the asset is staked. This is empty if the asset is external.
  string host_chain_id = 3;

  // Disabled assets cannot be refracted, but can still be redeemed.
  bool disabled = 4;

  MaturityParams maturity_params = 5 [(gogoproto.nullable) = false];

  // The amount of fee for each operation on the asset.
  FeeRatios fee_ratios = 6 [(gogoproto.nullable) = false];
}

// The parameters based on which new maturities are introduced
message MaturityParams {
  // The number of maturities per year: can be 1, 2, 4, 12
  int32 levels_per_year = 1;

  // The number of years in advance that maturities are made available for
  int32 years = 2;
}

// Fee ratio per each operation
message FeeRatios {
  string yield = 1 [(cosmos_proto.scalar) = "cosmos.Dec", (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  string refractor_refract = 2 [(cosmos_proto.scalar) = "cosmos.Dec", (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  string refractor_merge = 3 [(cosmos_proto.scalar) = "cosmos.Dec", (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  string refractor_redeem = 4 [(cosmos_proto.scalar) = "cosmos.Dec", (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  string y_staking_claim_reward = 5 [(cosmos_proto.scalar) = "cosmos.Dec", (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
}
