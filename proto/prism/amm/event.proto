syntax = "proto3";
package prism.amm;

import "cosmos/base/v1beta1/coin.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "prism/amm/operations.proto";
import "prism/amm/oracle_price_pair.proto";
import "prism/amm/order.proto";
import "prism/amm/params.proto";
import "prism/amm/pending_token_introduction.proto";
import "prism/amm/pool.proto";
import "prism/amm/pool_token.proto";
import "prism/amm/schedule_order.proto";
import "prism/amm/virtual_balance_pool_token.proto";
import "prism/amm/weight_update_timing.proto";
import "prism/amm/weighted_token.proto";
import "prism/amm/whitelisted_route.proto";
import "prism/amm/yamm_configuration.proto";

option go_package = "github.com/prism-finance/prism-core/x/amm/types";

message EventSetPool {
  Pool pool = 1 [(gogoproto.nullable) = false];
}

message EventAppendPool {
  Pool pool = 1 [(gogoproto.nullable) = false];
}

message EventSetPoolCount {
  uint64 pool_count = 1;
}

message EventSetLpTokenSupply {
  uint64 pool_id = 1;
  string supply = 2 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
}

message EventSetPoolToken {
  PoolToken pool_token = 1 [(gogoproto.nullable) = false];
}

message EventRemovePoolToken {
  uint64 pool_id = 1;
  string denom = 2;
}

message EventSetWeightedToken {
  WeightedToken weighted_token = 1 [(gogoproto.nullable) = false];
}

message EventRemoveWeightedToken {
  uint64 pool_id = 1;
  string denom = 2;
}

message EventSetWeightUpdateTiming {
  WeightUpdateTiming weight_update_timing = 1 [(gogoproto.nullable) = false];
}

message EventSetWhitelistedRoute {
  WhitelistedRoute whitelisted_route = 1 [(gogoproto.nullable) = false];
}

message EventSetYammConfiguration {
  YammConfiguration yamm_configuration = 1 [(gogoproto.nullable) = false];
}

message EventSetOrder {
  Order order = 1 [(gogoproto.nullable) = false];
}

message EventAppendOrder {
  Order order = 1 [(gogoproto.nullable) = false];
}

message EventSetOrderCount {
  uint64 order_count = 1;
}

message EventRemoveOrder {
  uint64 id = 1;
}

message EventCancelOrder {
  uint64 id = 1;
  cosmos.base.v1beta1.Coin withdrawn_amount = 2 [(gogoproto.nullable) = false];
}

message EventSetScheduleOrder {
  ScheduleOrder schedule_order = 1 [(gogoproto.nullable) = false];
}

message EventRemoveScheduleOrder {
  uint64 order_id = 1;
  int64 time_millis = 2;
}

message EventSetExecutableOrder {
  uint64 order_id = 1;
}

message EventRemoveExecutableOrder {
  uint64 order_id = 1;
}

message EventSetIntroducingPoolToken {
  VirtualBalancePoolToken virtual_balance_token = 1 [(gogoproto.nullable) = false];
}

message EventRemoveIntroducingPoolToken {
  uint64 pool_id = 1;
  string denom = 2;
}

message EventSetExpiringPoolToken {
  VirtualBalancePoolToken virtual_balance_token = 1 [(gogoproto.nullable) = false];
}

message EventRemoveExpiringPoolToken {
  uint64 pool_id = 1;
  string denom = 2;
}

message EventSetYammPoolForAssetId {
  uint64 pool_id = 1;
  string asset_id = 2;
}

message EventSetVaultPaused {
  bool paused = 1;
}

message EventExecuteOrder {
  uint64 order_id = 1;
  string trade_amount = 2 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
  string match_amount = 3 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
}

message EventExecuteOrdersForPair {
  uint64 pool_id = 1;
  string token_in = 2;
  string token_out = 3;
  bool whitelisted_route = 4;

  string buy_price = 5 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
  string sell_price = 6 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];

  repeated EventExecuteOrder buy_orders = 7 [(gogoproto.nullable) = false];
  repeated EventExecuteOrder sell_orders = 8 [(gogoproto.nullable) = false];

  string buy_trade_amount = 9 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
  string buy_match_amount = 10 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];

  string sell_trade_amount = 11 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
  string sell_match_amount = 12 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];

  string sell_trade_output = 13 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
  string buy_trade_output = 14 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
}

message EventExecuteMatchProposalOrder {
  uint64 order_id = 1;
  string match_amount = 3 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
}

message EventExecuteMatchProposalPair {
  uint64 pool_id = 1;
  string token_in = 2;
  string token_out = 3;
  bool whitelisted_route = 4;

  string buy_price = 5 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
  string sell_price = 6 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];

  repeated EventExecuteMatchProposalOrder buy_orders = 7 [(gogoproto.nullable) = false];
  repeated EventExecuteMatchProposalOrder sell_orders = 8 [(gogoproto.nullable) = false];

  string buy_match_amount = 9 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
  string sell_match_amount = 10 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
}

message EventExecuteMatchProposal {
  string proposer = 1;
  repeated EventExecuteMatchProposalPair pairs = 2 [(gogoproto.nullable) = false];
  repeated cosmos.base.v1beta1.Coin proposer_reward = 3 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}

message EventExitPool {
  uint64 pool_id = 1;
  ExitSummary summary = 2 [(gogoproto.nullable) = false];
}

message EventJoinPool {
  uint64 pool_id = 1;
  JoinSummary summary = 2 [(gogoproto.nullable) = false];
}

message EventSwap {
  uint64 pool_id = 1;
  SwapSummary summary = 2 [(gogoproto.nullable) = false];
}

message EventYAssetSwapRefractorAction {
  string y_amount = 1 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
  string c_amount_after_fee = 2 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
  string fee_amount = 3 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
}

message EventYAssetSwap {
  uint64 pool_id = 1;
  SwapSummary summary = 2 [(gogoproto.nullable) = false];
  EventYAssetSwapRefractorAction refractor_action = 3 [(gogoproto.nullable) = false];
  cosmos.base.v1beta1.Coin fee = 4 [(gogoproto.nullable) = true];
}

message EventSetOraclePricePair {
  OraclePricePair oracle_price_pair = 1 [(gogoproto.nullable) = false];
}

message EventRemoveOraclePricePair {
  string asset_id = 1;
}

message EventSetPendingTokenIntroduction {
  PendingTokenIntroduction pending_token_introduction = 1 [(gogoproto.nullable) = false];
}

message EventRemovePendingTokenIntroduction {
  string asset_id = 1;
  uint64 target_pool_id = 2;
}

message EventSetParams {
  Params params = 1 [(gogoproto.nullable) = false];
}
