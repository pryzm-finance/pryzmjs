syntax = "proto3";
package prism.amm;

import "cosmos/base/v1beta1/coin.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "prism/amm/operations.proto";
import "prism/amm/oracle_price_pair.proto";
import "prism/amm/order.proto";
import "prism/amm/pair_match_proposal.proto";
// this line is used by starport scaffolding # proto/tx/import
import "prism/amm/params.proto";
import "prism/amm/token_circuit_breaker_settings.proto";
import "prism/amm/token_weight.proto";
import "prism/amm/whitelisted_route.proto";
import "prism/amm/yamm_configuration.proto";

option go_package = "github.com/prism-finance/prism-core/x/amm/types";

// Msg defines the Msg service.
service Msg {
  rpc SingleSwap(MsgSingleSwap) returns (MsgSingleSwapResponse);
  rpc JoinAllTokensExactLpt(MsgJoinAllTokensExactLpt) returns (MsgJoinAllTokensExactLptResponse);
  rpc JoinTokenExactLpt(MsgJoinTokenExactLpt) returns (MsgJoinTokenExactLptResponse);
  rpc JoinExactTokens(MsgJoinExactTokens) returns (MsgJoinExactTokensResponse);
  rpc ExitExactTokens(MsgExitExactTokens) returns (MsgExitExactTokensResponse);
  rpc ExitTokenExactLpt(MsgExitTokenExactLpt) returns (MsgExitTokenExactLptResponse);
  rpc ExitAllTokensExactLpt(MsgExitAllTokensExactLpt) returns (MsgExitAllTokensExactLptResponse);
  rpc CreateWeightedPool(MsgCreateWeightedPool) returns (MsgCreateWeightedPoolResponse);
  rpc UpdateSwapFee(MsgUpdateSwapFee) returns (MsgUpdateSwapFeeResponse);
  rpc InitializePool(MsgInitializePool) returns (MsgInitializePoolResponse);
  rpc UpdateWeights(MsgUpdateWeights) returns (MsgUpdateWeightsResponse);
  rpc BatchSwap(MsgBatchSwap) returns (MsgBatchSwapResponse);
  rpc SetYammConfiguration(MsgSetYammConfiguration) returns (MsgSetYammConfigurationResponse);
  rpc WhitelistRoute(MsgWhitelistRoute) returns (MsgWhitelistRouteResponse);
  rpc SetWhitelistedRouteEnabled(MsgSetWhitelistedRouteEnabled) returns (MsgSetWhitelistedRouteEnabledResponse);
  rpc SubmitOrder(MsgSubmitOrder) returns (MsgSubmitOrderResponse);
  rpc CancelOrder(MsgCancelOrder) returns (MsgCancelOrderResponse);
  rpc ProposeMatch(MsgProposeMatch) returns (MsgProposeMatchResponse);
  rpc SetCircuitBreakers(MsgSetCircuitBreakers) returns (MsgSetCircuitBreakersResponse);
  rpc SetRecoveryMode(MsgSetRecoveryMode) returns (MsgSetRecoveryModeResponse);
  rpc RecoveryExit(MsgRecoveryExit) returns (MsgRecoveryExitResponse);
  rpc SetPauseMode(MsgSetPauseMode) returns (MsgSetPauseModeResponse);
  rpc SetVaultPauseMode(MsgSetVaultPauseMode) returns (MsgSetVaultPauseModeResponse);
  rpc CreateOraclePricePair(MsgCreateOraclePricePair) returns (MsgCreateOraclePricePairResponse);
  rpc UpdateOraclePricePair(MsgUpdateOraclePricePair) returns (MsgUpdateOraclePricePairResponse);
  rpc DeleteOraclePricePair(MsgDeleteOraclePricePair) returns (MsgDeleteOraclePricePairResponse);
  rpc SetSwapProtocolFee(MsgSetSwapProtocolFee) returns (MsgSetSwapProtocolFeeResponse);
  rpc SetJoinExitProtocolFee(MsgSetJoinExitProtocolFee) returns (MsgSetJoinExitProtocolFeeResponse);
  rpc IntroduceYammLpToWeightedPool(MsgIntroduceYammLpToWeightedPool) returns (MsgIntroduceYammLpToWeightedPoolResponse);
  rpc IntroduceAssetBaseTokenToWeightedPool(MsgIntroduceAssetBaseTokenToWeightedPool) returns (MsgIntroduceAssetBaseTokenToWeightedPoolResponse);
  rpc CancelPendingTokenIntroduction(MsgCancelPendingTokenIntroduction) returns (MsgCancelPendingTokenIntroductionResponse);
  rpc RemoveTokenFromWeightedPool(MsgRemoveTokenFromWeightedPool) returns (MsgRemoveTokenFromWeightedPoolResponse);
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
  rpc AddMaturityToYamm(MsgAddMaturityToYamm) returns (MsgAddMaturityToYammResponse);
  rpc SetInitializationAllowList(MsgSetInitializationAllowList) returns (MsgSetInitializationAllowListResponse);
  // this line is used by starport scaffolding # proto/tx/rpc
}

message MsgSingleSwap {
  string creator = 1;
  Swap swap = 2 [(gogoproto.nullable) = false];
  string max_amount_in = 3 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = true
  ];
  string min_amount_out = 4 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = true
  ];
}

message MsgSingleSwapResponse {
  cosmos.base.v1beta1.Coin amount_out = 1 [(gogoproto.nullable) = false];
  cosmos.base.v1beta1.Coin amount_in = 2 [(gogoproto.nullable) = false];
  // protocol fee does not contain the y_trade fee and refractor fee
  // which is paid in case of a yAsset trade
  cosmos.base.v1beta1.Coin protocol_fee = 3 [(gogoproto.nullable) = false];
  cosmos.base.v1beta1.Coin swap_fee = 4 [(gogoproto.nullable) = false];
}

message MsgJoinAllTokensExactLpt {
  string creator = 1;
  uint64 pool_id = 2;
  string lpt_out = 3 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
  repeated cosmos.base.v1beta1.Coin max_amounts_in = 4 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}

message MsgJoinAllTokensExactLptResponse {
  cosmos.base.v1beta1.Coin lpt_out = 1 [(gogoproto.nullable) = false];
  repeated cosmos.base.v1beta1.Coin amounts_in = 2 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
  repeated cosmos.base.v1beta1.Coin protocol_fee = 3 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}

message MsgJoinTokenExactLpt {
  string creator = 1;
  uint64 pool_id = 2;
  string lpt_out = 3 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
  string token_in = 4;
  string max_amount_in = 5 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = true
  ];
}

message MsgJoinTokenExactLptResponse {
  cosmos.base.v1beta1.Coin lpt_out = 1 [(gogoproto.nullable) = false];
  cosmos.base.v1beta1.Coin amount_in = 2 [(gogoproto.nullable) = false];
  cosmos.base.v1beta1.Coin protocol_fee = 3 [(gogoproto.nullable) = false];
  cosmos.base.v1beta1.Coin swap_fee = 4 [(gogoproto.nullable) = false];
}

message MsgJoinExactTokens {
  string creator = 1;
  uint64 pool_id = 2;
  repeated cosmos.base.v1beta1.Coin amounts_in = 3 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
  string min_lpt_out = 4 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = true
  ];
}

message MsgJoinExactTokensResponse {
  cosmos.base.v1beta1.Coin lpt_out = 1 [(gogoproto.nullable) = false];
  repeated cosmos.base.v1beta1.Coin amounts_in = 2 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
  repeated cosmos.base.v1beta1.Coin protocol_fee = 3 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
  repeated cosmos.base.v1beta1.Coin swap_fee = 4 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}

message MsgExitExactTokens {
  string creator = 1;
  uint64 pool_id = 2;
  repeated cosmos.base.v1beta1.Coin amounts_out = 3 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
  string max_lpt_in = 4 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = true
  ];
}

message MsgExitExactTokensResponse {
  cosmos.base.v1beta1.Coin lpt_in = 1 [(gogoproto.nullable) = false];
  repeated cosmos.base.v1beta1.Coin amounts_out = 2 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
  cosmos.base.v1beta1.Coin protocol_fee = 3 [(gogoproto.nullable) = false];
  repeated cosmos.base.v1beta1.Coin swap_fee = 4 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}

message MsgExitTokenExactLpt {
  string creator = 1;
  uint64 pool_id = 2;
  string lpt_in = 3 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
  string token_out = 4;
  string min_amount_out = 5 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = true
  ];
}

message MsgExitTokenExactLptResponse {
  cosmos.base.v1beta1.Coin lpt_in = 1 [(gogoproto.nullable) = false];
  cosmos.base.v1beta1.Coin amount_out = 2 [(gogoproto.nullable) = false];
  cosmos.base.v1beta1.Coin protocol_fee = 3 [(gogoproto.nullable) = false];
  cosmos.base.v1beta1.Coin swap_fee = 4 [(gogoproto.nullable) = false];
}

message MsgExitAllTokensExactLpt {
  string creator = 1;
  uint64 pool_id = 2;
  string lpt_in = 3 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
  repeated cosmos.base.v1beta1.Coin min_amounts_out = 4 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}

message MsgExitAllTokensExactLptResponse {
  cosmos.base.v1beta1.Coin lpt_in = 1 [(gogoproto.nullable) = false];
  repeated cosmos.base.v1beta1.Coin amounts_out = 2 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
  cosmos.base.v1beta1.Coin protocol_fee = 3 [(gogoproto.nullable) = false];
}

message CreateWeightedPoolToken {
  string denom = 1;
  string normalized_weight = 3 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
}

message MsgCreateWeightedPool {
  string creator = 1;
  string name = 2;
  string swap_fee_ratio = 3 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
  int64 pause_window_duration_millis = 4;
  int64 pause_buffer_duration_millis = 5;
  repeated CreateWeightedPoolToken tokens = 6 [(gogoproto.nullable) = false];
  // if not empty, only these addresses can initialize the pool
  repeated string initialization_allow_list = 12;
}

message MsgCreateWeightedPoolResponse {
  uint64 pool_id = 1;
}

message MsgUpdateSwapFee {
  string creator = 1;
  uint64 pool_id = 2;
  string swap_fee_ratio = 3 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
}

message MsgUpdateSwapFeeResponse {}

message MsgInitializePool {
  string creator = 1;
  uint64 pool_id = 2;
  repeated cosmos.base.v1beta1.Coin amounts_in = 3 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}

message MsgInitializePoolResponse {
  cosmos.base.v1beta1.Coin lpt_out = 1 [(gogoproto.nullable) = false];
  repeated cosmos.base.v1beta1.Coin amounts_in = 2 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
  repeated cosmos.base.v1beta1.Coin protocol_fee = 3 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}

message MsgUpdateWeights {
  string creator = 1;
  uint64 pool_id = 2;
  repeated TokenWeight token_weights = 3 [(gogoproto.nullable) = false];
  int64 start_time_unix_millis = 4;
  int64 end_time_unix_millis = 5;
}

message MsgUpdateWeightsResponse {}

message MsgBatchSwap {
  string creator = 1;
  SwapType swap_type = 2;
  repeated SwapStep steps = 3 [(gogoproto.nullable) = false];
  repeated cosmos.base.v1beta1.Coin min_amounts_out = 4 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
  repeated cosmos.base.v1beta1.Coin max_amounts_in = 5 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}

message MsgBatchSwapResponse {
  repeated cosmos.base.v1beta1.Coin amounts_in = 1 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
  repeated cosmos.base.v1beta1.Coin amounts_out = 2 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
  // protocol fee does not contain the y_trade fee and refractor fee
  // which is paid in case of a yAsset trade
  repeated cosmos.base.v1beta1.Coin protocol_fee = 3 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
  repeated cosmos.base.v1beta1.Coin swap_fee = 4 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}

message MsgSetYammConfiguration {
  string creator = 1;
  YammConfiguration configuration = 2 [(gogoproto.nullable) = false];
}

message MsgSetYammConfigurationResponse {}

message MsgWhitelistRoute {
  string authority = 1;
  WhitelistedRoute whitelisted_route = 2 [(gogoproto.nullable) = false];
}

message MsgWhitelistRouteResponse {}

message MsgSetWhitelistedRouteEnabled {
  string authority = 1;
  string token_in = 2;
  string token_out = 3;
  bool enabled = 4;
}

message MsgSetWhitelistedRouteEnabledResponse {}

message MsgSubmitOrder {
  string creator = 1;
  uint64 pool_id = 2;
  string token_in = 3;
  string token_out = 4;
  bool whitelisted_route = 5;
  bool allow_matching = 6;
  string amount_per_step = 7 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
  string total_amount = 8 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
  int64 millis_interval = 9;
  string max_step_spot_price = 10 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
  string max_matching_spot_price = 11 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = true
  ];
}

message MsgSubmitOrderResponse {
  Order order = 1 [(gogoproto.nullable) = false];
}

message MsgCancelOrder {
  string creator = 1;
  uint64 id = 2;
}

message MsgCancelOrderResponse {
  cosmos.base.v1beta1.Coin withdrawn_deposit = 1 [(gogoproto.nullable) = false];
}

message MsgProposeMatch {
  string creator = 1;
  repeated PairMatchProposal pairs = 2 [(gogoproto.nullable) = false];
}

message MsgProposeMatchResponse {
  repeated cosmos.base.v1beta1.Coin proposer_reward = 1 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}

message MsgSetCircuitBreakers {
  string creator = 1;
  uint64 pool_id = 2;
  repeated TokenCircuitBreakerSettings token_circuit_breakers = 3 [(gogoproto.nullable) = false];
}

message MsgSetCircuitBreakersResponse {}

message MsgSetRecoveryMode {
  string authority = 1;
  uint64 pool_id = 2;
  bool recovery_mode = 3;
}

message MsgSetRecoveryModeResponse {}

message MsgRecoveryExit {
  string creator = 1;
  uint64 pool_id = 2;
  string lpt_in = 3 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
  repeated cosmos.base.v1beta1.Coin min_amounts_out = 4 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}

message MsgRecoveryExitResponse {
  cosmos.base.v1beta1.Coin lpt_in = 1 [(gogoproto.nullable) = false];
  repeated cosmos.base.v1beta1.Coin amounts_out = 2 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}

message MsgSetPauseMode {
  string creator = 1;
  uint64 pool_id = 2;
  bool pause_mode = 3;
}

message MsgSetPauseModeResponse {}

message MsgSetVaultPauseMode {
  string authority = 1;
  bool pause_mode = 2;
}

message MsgSetVaultPauseModeResponse {}

message MsgCreateOraclePricePair {
  string authority = 1;
  OraclePricePair oracle_price_pair = 2 [(gogoproto.nullable) = false];
}
message MsgCreateOraclePricePairResponse {}

message MsgUpdateOraclePricePair {
  string authority = 1;
  OraclePricePair oracle_price_pair = 2 [(gogoproto.nullable) = false];
}
message MsgUpdateOraclePricePairResponse {}

message MsgDeleteOraclePricePair {
  string authority = 1;
  string asset_id = 2;
}
message MsgDeleteOraclePricePairResponse {}

message MsgSetSwapProtocolFee {
  string authority = 1;
  uint64 pool_id = 2;
  // if protocol fee parameters are nil, then the values are read from treasury module parameters
  string swap_protocol_fee = 3 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = true
  ];
}

message MsgSetSwapProtocolFeeResponse {}

message MsgSetJoinExitProtocolFee {
  string authority = 1;
  uint64 pool_id = 2;
  // if protocol fee parameters are nil, then the values are read from treasury module parameters
  string join_exit_protocol_fee = 3 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = true
  ];
}

message MsgSetJoinExitProtocolFeeResponse {}

message MsgIntroduceYammLpToWeightedPool {
  string authority = 1;
  uint64 weighted_pool_id = 2;
  uint64 yamm_pool_id = 3;
  string token_normalized_weight = 4 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
  int64 virtual_balance_interval_millis = 5;
}

message MsgIntroduceYammLpToWeightedPoolResponse {}

message MsgIntroduceAssetBaseTokenToWeightedPool {
  string authority = 1;
  uint64 weighted_pool_id = 2;
  string token_denom = 3;
  string asset_id = 4;
  string token_normalized_weight = 5 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
  int64 virtual_balance_interval_millis = 6;
}

message MsgIntroduceAssetBaseTokenToWeightedPoolResponse {}

message MsgCancelPendingTokenIntroduction {
  string authority = 1;
  string asset_id = 2;
  uint64 target_pool_id = 3;
}

message MsgCancelPendingTokenIntroductionResponse {}

message MsgRemoveTokenFromWeightedPool {
  string creator = 1;
  uint64 pool_id = 2;
  string token_denom = 3;
  int64 virtual_balance_interval_millis = 4;
}

message MsgRemoveTokenFromWeightedPoolResponse {}

message MsgUpdateParams {
  string authority = 1;
  GeneralPoolParameters general_pool_parameters = 2 [(gogoproto.nullable) = true];
  YammParameters yamm_parameters = 3 [(gogoproto.nullable) = true];
  OrderParameters order_parameters = 4 [(gogoproto.nullable) = true];
}

message MsgUpdateParamsResponse {}

message MsgAddMaturityToYamm {
  string authority = 1;
  string assetId = 2;
  string maturitySymbol = 3;
}

message MsgAddMaturityToYammResponse {}

message MsgSetInitializationAllowList {
  string creator = 1;
  uint64 pool_id = 2;
  repeated string initialization_allow_list = 3;
}

message MsgSetInitializationAllowListResponse {}

// this line is used by starport scaffolding # proto/tx/message
