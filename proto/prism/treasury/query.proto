syntax = "proto3";
package prism.treasury;

import "cosmos/base/query/v1beta1/pagination.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "prism/treasury/action.proto";
import "prism/treasury/flow_trade.proto";
// this line is used by starport scaffolding # 1

option go_package = "github.com/prism-finance/prism-core/x/treasury/types";

// Query defines the gRPC querier service.
service Query {
  // Queries a Action by index.
  rpc Action(QueryGetActionRequest) returns (QueryGetActionResponse) {
    option (google.api.http).get = "/prism-finance/prism-core/treasury/action";
  }

  // Queries a FlowTrade by index.
  rpc FlowTrade(QueryGetFlowTradeRequest) returns (QueryGetFlowTradeResponse) {
    option (google.api.http).get = "/prism-finance/prism-core/treasury/flow_trade/{flow_id}";
  }

  // Queries a list of FlowTrade items.
  rpc FlowTradeAll(QueryAllFlowTradeRequest) returns (QueryAllFlowTradeResponse) {
    option (google.api.http).get = "/prism-finance/prism-core/treasury/flow_trade";
  }

  // this line is used by starport scaffolding # 2
}

message QueryGetActionRequest {}

message QueryGetActionResponse {
  Action action = 1 [(gogoproto.nullable) = false];
}

message QueryGetFlowTradeRequest {
  uint64 flow_id = 1;
}

message QueryGetFlowTradeResponse {
  FlowTrade flow_trade = 1 [(gogoproto.nullable) = false];
}

message QueryAllFlowTradeRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllFlowTradeResponse {
  repeated FlowTrade flow_trade = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// this line is used by starport scaffolding # 3
