syntax = "proto3";
package pryzm.incentives.v1;

// this line is used by starport scaffolding # proto/tx/import
import "cosmos/base/v1beta1/coin.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "pryzm/incentives/v1/bond.proto";
import "pryzm/incentives/v1/params.proto";
import "pryzm/incentives/v1/unbonding.proto";

option go_package = "github.com/pryzm-finance/pryzm-core/x/incentives/types/v1";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
  rpc CreatePool(MsgCreatePool) returns (MsgCreatePoolResponse);
  rpc UpdateRewardTokenWeight(MsgUpdateRewardTokenWeight) returns (MsgUpdateRewardTokenWeightResponse);
  rpc AddRewardTokenToPool(MsgAddRewardTokenToPool) returns (MsgAddRewardTokenToPoolResponse);
  rpc Bond(MsgBond) returns (MsgBondResponse);
  rpc Unbond(MsgUnbond) returns (MsgUnbondResponse);
  rpc ClaimReward(MsgClaimReward) returns (MsgClaimRewardResponse);
  rpc ClaimUnbonding(MsgClaimUnbonding) returns (MsgClaimUnbondingResponse);
  rpc CancelUnbonding(MsgCancelUnbonding) returns (MsgCancelUnbondingResponse);
  rpc IncentivizePool(MsgIncentivizePool) returns (MsgIncentivizePoolResponse);
  // this line is used by starport scaffolding # proto/tx/rpc
}

message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";

  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  Params params = 2 [(gogoproto.nullable) = false];
}

message MsgUpdateParamsResponse {}

message WeightedRewardToken {
  string denom = 1;
  // weight is used for reward portion for each pool, when a reward is
  // accrued from dist module, it will be distributed to each pool according to the weights
  string weight = 2 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
}

message MsgCreatePool {
  option (cosmos.msg.v1.signer) = "authority";

  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string bond_denom = 2;
  repeated WeightedRewardToken reward_tokens = 3 [(gogoproto.nullable) = false];
}

message MsgCreatePoolResponse {}

message MsgUpdateRewardTokenWeight {
  option (cosmos.msg.v1.signer) = "authority";

  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string bond_denom = 2;
  WeightedRewardToken reward_token = 3 [(gogoproto.nullable) = false];
}

message MsgUpdateRewardTokenWeightResponse {}

message MsgAddRewardTokenToPool {
  option (cosmos.msg.v1.signer) = "authority";

  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string bond_denom = 2;
  WeightedRewardToken reward_token = 3 [(gogoproto.nullable) = false];
}

message MsgAddRewardTokenToPoolResponse {}

message MsgBond {
  option (cosmos.msg.v1.signer) = "creator";

  string creator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  cosmos.base.v1beta1.Coin amount = 2 [(gogoproto.nullable) = false];
}

message MsgBondResponse {
  Bond bond = 1 [(gogoproto.nullable) = false];
}

message MsgUnbond {
  option (cosmos.msg.v1.signer) = "creator";

  string creator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  cosmos.base.v1beta1.Coin amount = 2 [(gogoproto.nullable) = false];
  string unbond_treasury = 3 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string reward_treasury = 4 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  bool auto_claim = 5;
}

message MsgUnbondResponse {
  Unbonding unbonding = 1;
  repeated cosmos.base.v1beta1.Coin rewards = 2 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}

message MsgClaimReward {
  option (cosmos.msg.v1.signer) = "creator";

  string creator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string bond_denom = 2;
  string treasury = 3 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

message MsgClaimRewardResponse {
  repeated cosmos.base.v1beta1.Coin rewards = 1 [(gogoproto.nullable) = false];
}

message MsgClaimUnbonding {
  option (cosmos.msg.v1.signer) = "creator";

  string creator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  uint64 unbonding_id = 2;
}

message MsgClaimUnbondingResponse {
  cosmos.base.v1beta1.Coin amount = 1 [(gogoproto.nullable) = false];
}

message MsgCancelUnbonding {
  option (cosmos.msg.v1.signer) = "creator";

  string creator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  uint64 unbonding_id = 2;
  cosmos.base.v1beta1.Coin amount = 3 [(gogoproto.nullable) = false];
}

message MsgCancelUnbondingResponse {
  Bond bond = 1 [(gogoproto.nullable) = false];
}

message MsgIncentivizePool {
  option (cosmos.msg.v1.signer) = "creator";

  string creator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string bond_denom = 2;
  repeated cosmos.base.v1beta1.Coin amount = 3 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}

message MsgIncentivizePoolResponse {}

// this line is used by starport scaffolding # proto/tx/message
