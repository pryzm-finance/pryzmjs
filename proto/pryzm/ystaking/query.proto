syntax = "proto3";
package pryzm.ystaking;

import "cosmos/base/query/v1beta1/pagination.proto";
// this line is used by starport scaffolding # 1
import "cosmos/base/v1beta1/coin.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "pryzm/ystaking/asset_pool_state.proto";
import "pryzm/ystaking/user_stake_state.proto";

option go_package = "github.com/pryzm-finance/pryzm-core/x/ystaking/types";

// Query defines the gRPC querier service.
service Query {
  // Queries a list of BondedAmount items.
  rpc BondedAmount(QueryBondedAmountRequest) returns (QueryBondedAmountResponse) {
    option (google.api.http).get = "/pryzm-finance/pryzm-core/ystaking/bonded_amount/{asset_id}";
  }

  rpc Reward(QueryRewardRequest) returns (QueryRewardResponse) {
    option (google.api.http).get = "/pryzm-finance/pryzm-core/ystaking/reward/{denom}/{address}";
  }

  rpc UserStakeState(QueryGetUserStakeStateRequest) returns (QueryGetUserStakeStateResponse) {
    option (google.api.http).get = "/pryzm-finance/pryzm-core/ystaking/user_stake_state/{address}/{asset_id}/{maturity_symbol}";
  }

  // Queries a list of UserStakeState items.
  rpc UserStakeStateAll(QueryAllUserStakeStateRequest) returns (QueryAllUserStakeStateResponse) {
    option (google.api.http).get = "/pryzm-finance/pryzm-core/ystaking/user_stake_state";
  }

  rpc AssetPoolState(QueryGetAssetPoolStateRequest) returns (QueryGetAssetPoolStateResponse) {
    option (google.api.http).get = "/pryzm-finance/pryzm-core/ystaking/asset_pool_state/{asset_id}";
  }

  rpc AssetPoolStateAll(QueryAllAssetPoolStateRequest) returns (QueryAllAssetPoolStateResponse) {
    option (google.api.http).get = "/pryzm-finance/pryzm-core/ystaking/asset_pool_state";
  }

  rpc AssetMaturityPoolState(QueryGetAssetMaturityPoolStateRequest) returns (QueryGetAssetMaturityPoolStateResponse) {
    option (google.api.http).get = "/pryzm-finance/pryzm-core/ystaking/asset_maturity_pool_state/{asset_id}/{maturity_symbol}";
  }

  rpc AssetMaturityPoolStateAll(QueryAllAssetMaturityPoolStateRequest) returns (QueryAllAssetMaturityPoolStateResponse) {
    option (google.api.http).get = "/pryzm-finance/pryzm-core/ystaking/asset_maturity_pool_state";
  }
  // this line is used by starport scaffolding # 2
}

message QueryBondedAmountRequest {
  string asset_id = 1;
  string maturity = 2;
  string address = 3 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

message QueryBondedAmountResponse {
  string amount = 1 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
}

message QueryRewardRequest {
  string denom = 1;
  string address = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

message QueryRewardResponse {
  cosmos.base.v1beta1.Coin amount = 1 [(gogoproto.nullable) = false];
}

message QueryGetUserStakeStateRequest {
  string address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string asset_id = 2;
  string maturity_symbol = 3;
}

message QueryGetUserStakeStateResponse {
  UserStakeState user_stake_state = 1 [(gogoproto.nullable) = false];
}

message QueryAllUserStakeStateRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1 [(gogoproto.nullable) = true];
}

message QueryAllUserStakeStateResponse {
  repeated UserStakeState user_stake_state = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2 [(gogoproto.nullable) = true];
}

message QueryGetAssetPoolStateRequest {
  string asset_id = 1;
}

message QueryGetAssetPoolStateResponse {
  AssetPoolState asset_pool_state = 1 [(gogoproto.nullable) = false];
}

message QueryAllAssetPoolStateRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1 [(gogoproto.nullable) = true];
}

message QueryAllAssetPoolStateResponse {
  repeated AssetPoolState asset_pool_state = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2 [(gogoproto.nullable) = true];
}

message QueryGetAssetMaturityPoolStateRequest {
  string asset_id = 1;
  string maturity_symbol = 2;
}

message QueryGetAssetMaturityPoolStateResponse {
  AssetMaturityPoolState asset_maturity_pool_state = 1 [(gogoproto.nullable) = false];
}

message QueryAllAssetMaturityPoolStateRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1 [(gogoproto.nullable) = true];
}

message QueryAllAssetMaturityPoolStateResponse {
  repeated AssetMaturityPoolState asset_maturity_pool_state = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2 [(gogoproto.nullable) = true];
}
// this line is used by starport scaffolding # 3
