syntax = "proto3";
package pryzm.mint.v1;

import "amino/amino.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "pryzm/mint/v1/params.proto";

option go_package = "github.com/pryzm-finance/pryzm-core/x/mint/types/v1";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
  rpc DappAccountSpend(MsgDappAccountSpend) returns (MsgDappAccountSpendResponse);
  // this line is used by starport scaffolding # proto/tx/rpc
}

message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "pryzm/mint/v1/UpdateParams";

  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  Params params = 2 [(gogoproto.nullable) = false];
}

message MsgUpdateParamsResponse {}

message MsgDappAccountSpend {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "pryzm/mint/v1/DappAccountSpend";

  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string title = 2;
  string description = 3;
  string recipient = 4 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  repeated cosmos.base.v1beta1.Coin amount = 5 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}

message MsgDappAccountSpendResponse {}

// this line is used by starport scaffolding # proto/tx/message
