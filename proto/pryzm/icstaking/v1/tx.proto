syntax = "proto3";
package pryzm.icstaking.v1;

import "amino/amino.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "pryzm/icstaking/v1/host_chain.proto";
import "pryzm/icstaking/v1/params.proto";
// this line is used by starport scaffolding # proto/tx/import

option go_package = "github.com/pryzm-finance/pryzm-core/x/icstaking/types/v1";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
  rpc RegisterHostChain(MsgRegisterHostChain) returns (MsgRegisterHostChainResponse);
  rpc UpdateHostChain(MsgUpdateHostChain) returns (MsgUpdateHostChainResponse);
  rpc Stake(MsgStake) returns (MsgStakeResponse);
  rpc Unstake(MsgUnstake) returns (MsgUnstakeResponse);
  rpc RedeemUnstaked(MsgRedeemUnstaked) returns (MsgRedeemUnstakedResponse);
  rpc InstantUnstake(MsgInstantUnstake) returns (MsgInstantUnstakeResponse);
  rpc RebalanceDelegations(MsgRebalanceDelegations) returns (MsgRebalanceDelegationsResponse);
  rpc RegisterInterchainAccount(MsgRegisterInterchainAccount) returns (MsgRegisterInterchainAccountResponse);
  // this line is used by starport scaffolding # proto/tx/rpc
}

message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "pryzm/icstaking/v1/UpdateParams";

  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  Params params = 2 [(gogoproto.nullable) = false];
}

message MsgUpdateParamsResponse {}

message MsgRegisterHostChain {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name) = "pryzm/icstaking/v1/RegisterHostChain";

  string creator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  HostChain host_chain = 2 [(gogoproto.nullable) = false];
}

message MsgRegisterHostChainResponse {}

message MsgUpdateHostChain {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name) = "pryzm/icstaking/v1/UpdateHostChain";

  string creator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string host_chain_id = 2;
  repeated Validator validators = 3 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "Validators"
  ];
  StakingParams params = 4 [(gogoproto.nullable) = true];
}

message MsgUpdateHostChainResponse {}

message MsgStake {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name) = "pryzm/icstaking/v1/Stake";

  string creator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string host_chain = 2;
  string transfer_channel = 3;
  string amount = 4 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
}

message MsgStakeResponse {
  cosmos.base.v1beta1.Coin c_amount = 1 [(gogoproto.nullable) = false];
  cosmos.base.v1beta1.Coin fee = 2 [(gogoproto.nullable) = false];
}

message MsgUnstake {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name) = "pryzm/icstaking/v1/Unstake";

  string creator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string host_chain = 2;
  string transfer_channel = 3;
  string c_amount = 4 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
}

message MsgUnstakeResponse {
  cosmos.base.v1beta1.Coin u_amount = 1 [(gogoproto.nullable) = false];
}

message MsgRedeemUnstaked {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name) = "pryzm/icstaking/v1/RedeemUnstaked";

  string creator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string host_chain = 2;
  string transfer_channel = 3;
  string u_amount = 4 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
  uint64 epoch = 5;
}

message MsgRedeemUnstakedResponse {
  cosmos.base.v1beta1.Coin amount = 1 [(gogoproto.nullable) = false];
  cosmos.base.v1beta1.Coin fee = 2 [(gogoproto.nullable) = false];
}

message MsgInstantUnstake {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name) = "pryzm/icstaking/v1/InstantUnstake";

  string creator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string host_chain = 2;
  string transfer_channel = 3;
  string min_c_amount = 4 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
  string max_c_amount = 5 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
}

message MsgInstantUnstakeResponse {
  cosmos.base.v1beta1.Coin amount = 1 [(gogoproto.nullable) = false];
  cosmos.base.v1beta1.Coin fee = 2 [(gogoproto.nullable) = false];
}

message MsgRebalanceDelegations {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name) = "pryzm/icstaking/v1/RebalanceDelegations";

  string creator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string host_chain = 2;
}

message MsgRebalanceDelegationsResponse {}

message MsgRegisterInterchainAccount {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name) = "pryzm/icstaking/v1/RegInterchainAccount";

  string creator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string host_chain = 2;
  ICARegistrationType registration_type = 3;
}

message MsgRegisterInterchainAccountResponse {}

enum ICARegistrationType {
  // register delegation interchain account
  DELEGATION = 0;
  // register reward interchain account
  REWARD = 1;
  // register sweep interchain account
  SWEEP = 2;
  // registration of reward account as the withdraw address on the host chain
  REWARD_CLAIMING = 3;
}

// this line is used by starport scaffolding # proto/tx/message
